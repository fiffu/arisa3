// Code generated by MockGen. DO NOT EDIT.
// Source: appcog.go

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	database "github.com/fiffu/arisa3/app/database"
	gomock "github.com/golang/mock/gomock"
)

// MockIApp is a mock of IApp interface.
type MockIApp struct {
	ctrl     *gomock.Controller
	recorder *MockIAppMockRecorder
}

// MockIAppMockRecorder is the mock recorder for MockIApp.
type MockIAppMockRecorder struct {
	mock *MockIApp
}

// NewMockIApp creates a new mock instance.
func NewMockIApp(ctrl *gomock.Controller) *MockIApp {
	mock := &MockIApp{ctrl: ctrl}
	mock.recorder = &MockIAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApp) EXPECT() *MockIAppMockRecorder {
	return m.recorder
}

// BotSession mocks base method.
func (m *MockIApp) BotSession() *discordgo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BotSession")
	ret0, _ := ret[0].(*discordgo.Session)
	return ret0
}

// BotSession indicates an expected call of BotSession.
func (mr *MockIAppMockRecorder) BotSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BotSession", reflect.TypeOf((*MockIApp)(nil).BotSession))
}

// Configs mocks base method.
func (m *MockIApp) Configs() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configs")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Configs indicates an expected call of Configs.
func (mr *MockIAppMockRecorder) Configs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configs", reflect.TypeOf((*MockIApp)(nil).Configs))
}

// Database mocks base method.
func (m *MockIApp) Database() database.IDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(database.IDatabase)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockIAppMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockIApp)(nil).Database))
}

// Shutdown mocks base method.
func (m *MockIApp) Shutdown(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", arg0)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIAppMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIApp)(nil).Shutdown), arg0)
}

// MockCogConfig is a mock of CogConfig interface.
type MockCogConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCogConfigMockRecorder
}

// MockCogConfigMockRecorder is the mock recorder for MockCogConfig.
type MockCogConfigMockRecorder struct {
	mock *MockCogConfig
}

// NewMockCogConfig creates a new mock instance.
func NewMockCogConfig(ctrl *gomock.Controller) *MockCogConfig {
	mock := &MockCogConfig{ctrl: ctrl}
	mock.recorder = &MockCogConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCogConfig) EXPECT() *MockCogConfigMockRecorder {
	return m.recorder
}

// MockStructPointer is a mock of StructPointer interface.
type MockStructPointer struct {
	ctrl     *gomock.Controller
	recorder *MockStructPointerMockRecorder
}

// MockStructPointerMockRecorder is the mock recorder for MockStructPointer.
type MockStructPointerMockRecorder struct {
	mock *MockStructPointer
}

// NewMockStructPointer creates a new mock instance.
func NewMockStructPointer(ctrl *gomock.Controller) *MockStructPointer {
	mock := &MockStructPointer{ctrl: ctrl}
	mock.recorder = &MockStructPointerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStructPointer) EXPECT() *MockStructPointerMockRecorder {
	return m.recorder
}

// MockICog is a mock of ICog interface.
type MockICog struct {
	ctrl     *gomock.Controller
	recorder *MockICogMockRecorder
}

// MockICogMockRecorder is the mock recorder for MockICog.
type MockICogMockRecorder struct {
	mock *MockICog
}

// NewMockICog creates a new mock instance.
func NewMockICog(ctrl *gomock.Controller) *MockICog {
	mock := &MockICog{ctrl: ctrl}
	mock.recorder = &MockICogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICog) EXPECT() *MockICogMockRecorder {
	return m.recorder
}

// ConfigPointer mocks base method.
func (m *MockICog) ConfigPointer() StructPointer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigPointer")
	ret0, _ := ret[0].(StructPointer)
	return ret0
}

// ConfigPointer indicates an expected call of ConfigPointer.
func (mr *MockICogMockRecorder) ConfigPointer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigPointer", reflect.TypeOf((*MockICog)(nil).ConfigPointer))
}

// Name mocks base method.
func (m *MockICog) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockICogMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockICog)(nil).Name))
}

// OnStartup mocks base method.
func (m *MockICog) OnStartup(ctx context.Context, app IApp, config CogConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStartup", ctx, app, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStartup indicates an expected call of OnStartup.
func (mr *MockICogMockRecorder) OnStartup(ctx, app, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStartup", reflect.TypeOf((*MockICog)(nil).OnStartup), ctx, app, config)
}
