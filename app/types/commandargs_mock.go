// Code generated by MockGen. DO NOT EDIT.
// Source: commandargs.go

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockIArgs is a mock of IArgs interface.
type MockIArgs struct {
	ctrl     *gomock.Controller
	recorder *MockIArgsMockRecorder
}

// MockIArgsMockRecorder is the mock recorder for MockIArgs.
type MockIArgsMockRecorder struct {
	mock *MockIArgs
}

// NewMockIArgs creates a new mock instance.
func NewMockIArgs(ctrl *gomock.Controller) *MockIArgs {
	mock := &MockIArgs{ctrl: ctrl}
	mock.recorder = &MockIArgsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArgs) EXPECT() *MockIArgsMockRecorder {
	return m.recorder
}

// Bool mocks base method.
func (m *MockIArgs) Bool(key string) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Bool indicates an expected call of Bool.
func (mr *MockIArgsMockRecorder) Bool(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockIArgs)(nil).Bool), key)
}

// Channel mocks base method.
func (m *MockIArgs) Channel(key string) (*discordgo.Channel, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel", key)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockIArgsMockRecorder) Channel(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockIArgs)(nil).Channel), key)
}

// Float mocks base method.
func (m *MockIArgs) Float(key string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float", key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Float indicates an expected call of Float.
func (mr *MockIArgsMockRecorder) Float(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockIArgs)(nil).Float), key)
}

// Int mocks base method.
func (m *MockIArgs) Int(key string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockIArgsMockRecorder) Int(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockIArgs)(nil).Int), key)
}

// Role mocks base method.
func (m *MockIArgs) Role(key string) (*discordgo.Role, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role", key)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Role indicates an expected call of Role.
func (mr *MockIArgsMockRecorder) Role(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockIArgs)(nil).Role), key)
}

// String mocks base method.
func (m *MockIArgs) String(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockIArgsMockRecorder) String(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIArgs)(nil).String), key)
}

// User mocks base method.
func (m *MockIArgs) User(key string) (*discordgo.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", key)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockIArgsMockRecorder) User(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIArgs)(nil).User), key)
}
