// Code generated by MockGen. DO NOT EDIT.
// Source: messageevent.go

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockIMessageEvent is a mock of IMessageEvent interface.
type MockIMessageEvent struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageEventMockRecorder
}

// MockIMessageEventMockRecorder is the mock recorder for MockIMessageEvent.
type MockIMessageEventMockRecorder struct {
	mock *MockIMessageEvent
}

// NewMockIMessageEvent creates a new mock instance.
func NewMockIMessageEvent(ctrl *gomock.Controller) *MockIMessageEvent {
	mock := &MockIMessageEvent{ctrl: ctrl}
	mock.recorder = &MockIMessageEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageEvent) EXPECT() *MockIMessageEventMockRecorder {
	return m.recorder
}

// Event mocks base method.
func (m *MockIMessageEvent) Event() IEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(IEvent)
	return ret0
}

// Event indicates an expected call of Event.
func (mr *MockIMessageEventMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockIMessageEvent)(nil).Event))
}

// GuildID mocks base method.
func (m *MockIMessageEvent) GuildID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GuildID indicates an expected call of GuildID.
func (mr *MockIMessageEventMockRecorder) GuildID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildID", reflect.TypeOf((*MockIMessageEvent)(nil).GuildID))
}

// Message mocks base method.
func (m *MockIMessageEvent) Message() *discordgo.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(*discordgo.Message)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockIMessageEventMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockIMessageEvent)(nil).Message))
}

// User mocks base method.
func (m *MockIMessageEvent) User() *discordgo.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(*discordgo.User)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockIMessageEventMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIMessageEvent)(nil).User))
}
