// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package cardboard is a generated GoMock package.
package cardboard

import (
	context "context"
	reflect "reflect"

	api "github.com/fiffu/arisa3/app/cogs/cardboard/api"
	types "github.com/fiffu/arisa3/app/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIDomain is a mock of IDomain interface.
type MockIDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIDomainMockRecorder
}

// MockIDomainMockRecorder is the mock recorder for MockIDomain.
type MockIDomainMockRecorder struct {
	mock *MockIDomain
}

// NewMockIDomain creates a new mock instance.
func NewMockIDomain(ctrl *gomock.Controller) *MockIDomain {
	mock := &MockIDomain{ctrl: ctrl}
	mock.recorder = &MockIDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDomain) EXPECT() *MockIDomainMockRecorder {
	return m.recorder
}

// GetAliases mocks base method.
func (m *MockIDomain) GetAliases(ctx context.Context, guildID string) (map[Alias]Actual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", ctx, guildID)
	ret0, _ := ret[0].(map[Alias]Actual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases.
func (mr *MockIDomainMockRecorder) GetAliases(ctx, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockIDomain)(nil).GetAliases), ctx, guildID)
}

// MaintenanceResult mocks base method.
func (m *MockIDomain) MaintenanceResult() types.ICommandResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceResult")
	ret0, _ := ret[0].(types.ICommandResponse)
	return ret0
}

// MaintenanceResult indicates an expected call of MaintenanceResult.
func (mr *MockIDomainMockRecorder) MaintenanceResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceResult", reflect.TypeOf((*MockIDomain)(nil).MaintenanceResult))
}

// PostsResult mocks base method.
func (m *MockIDomain) PostsResult(arg0 context.Context, arg1 IQueryPosts, arg2 []*api.Post) (types.IEmbed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.IEmbed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostsResult indicates an expected call of PostsResult.
func (mr *MockIDomainMockRecorder) PostsResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsResult", reflect.TypeOf((*MockIDomain)(nil).PostsResult), arg0, arg1, arg2)
}

// PostsSearch mocks base method.
func (m *MockIDomain) PostsSearch(arg0 context.Context, arg1 IQueryPosts) ([]*api.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsSearch", arg0, arg1)
	ret0, _ := ret[0].([]*api.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostsSearch indicates an expected call of PostsSearch.
func (mr *MockIDomainMockRecorder) PostsSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsSearch", reflect.TypeOf((*MockIDomain)(nil).PostsSearch), arg0, arg1)
}

// SetAlias mocks base method.
func (m *MockIDomain) SetAlias(ctx context.Context, guildID string, alias Alias, actual Actual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlias", ctx, guildID, alias, actual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlias indicates an expected call of SetAlias.
func (mr *MockIDomainMockRecorder) SetAlias(ctx, guildID, alias, actual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlias", reflect.TypeOf((*MockIDomain)(nil).SetAlias), ctx, guildID, alias, actual)
}

// SetDemote mocks base method.
func (m *MockIDomain) SetDemote(ctx context.Context, guildID, tagName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDemote", ctx, guildID, tagName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDemote indicates an expected call of SetDemote.
func (mr *MockIDomainMockRecorder) SetDemote(ctx, guildID, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDemote", reflect.TypeOf((*MockIDomain)(nil).SetDemote), ctx, guildID, tagName)
}

// SetOmit mocks base method.
func (m *MockIDomain) SetOmit(ctx context.Context, guildID, tagName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOmit", ctx, guildID, tagName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOmit indicates an expected call of SetOmit.
func (mr *MockIDomainMockRecorder) SetOmit(ctx, guildID, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOmit", reflect.TypeOf((*MockIDomain)(nil).SetOmit), ctx, guildID, tagName)
}

// SetPromote mocks base method.
func (m *MockIDomain) SetPromote(ctx context.Context, guildID, tagName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPromote", ctx, guildID, tagName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPromote indicates an expected call of SetPromote.
func (mr *MockIDomainMockRecorder) SetPromote(ctx, guildID, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPromote", reflect.TypeOf((*MockIDomain)(nil).SetPromote), ctx, guildID, tagName)
}

// TagsSearch mocks base method.
func (m *MockIDomain) TagsSearch(ctx context.Context, query string) ([]*api.TagSuggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsSearch", ctx, query)
	ret0, _ := ret[0].([]*api.TagSuggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsSearch indicates an expected call of TagsSearch.
func (mr *MockIDomainMockRecorder) TagsSearch(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsSearch", reflect.TypeOf((*MockIDomain)(nil).TagsSearch), ctx, query)
}

// MockIQueryPosts is a mock of IQueryPosts interface.
type MockIQueryPosts struct {
	ctrl     *gomock.Controller
	recorder *MockIQueryPostsMockRecorder
}

// MockIQueryPostsMockRecorder is the mock recorder for MockIQueryPosts.
type MockIQueryPostsMockRecorder struct {
	mock *MockIQueryPosts
}

// NewMockIQueryPosts creates a new mock instance.
func NewMockIQueryPosts(ctrl *gomock.Controller) *MockIQueryPosts {
	mock := &MockIQueryPosts{ctrl: ctrl}
	mock.recorder = &MockIQueryPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueryPosts) EXPECT() *MockIQueryPostsMockRecorder {
	return m.recorder
}

// GuildID mocks base method.
func (m *MockIQueryPosts) GuildID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GuildID indicates an expected call of GuildID.
func (mr *MockIQueryPostsMockRecorder) GuildID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildID", reflect.TypeOf((*MockIQueryPosts)(nil).GuildID))
}

// MagicMode mocks base method.
func (m *MockIQueryPosts) MagicMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MagicMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MagicMode indicates an expected call of MagicMode.
func (mr *MockIQueryPostsMockRecorder) MagicMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MagicMode", reflect.TypeOf((*MockIQueryPosts)(nil).MagicMode))
}

// SetTerm mocks base method.
func (m *MockIQueryPosts) SetTerm(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTerm", arg0)
}

// SetTerm indicates an expected call of SetTerm.
func (mr *MockIQueryPostsMockRecorder) SetTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTerm", reflect.TypeOf((*MockIQueryPosts)(nil).SetTerm), arg0)
}

// Tags mocks base method.
func (m *MockIQueryPosts) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockIQueryPostsMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockIQueryPosts)(nil).Tags))
}

// Term mocks base method.
func (m *MockIQueryPosts) Term() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(string)
	return ret0
}

// Term indicates an expected call of Term.
func (mr *MockIQueryPostsMockRecorder) Term() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockIQueryPosts)(nil).Term))
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetAliases mocks base method.
func (m *MockIRepository) GetAliases(guildID string) (map[Alias]Actual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", guildID)
	ret0, _ := ret[0].(map[Alias]Actual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases.
func (mr *MockIRepositoryMockRecorder) GetAliases(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockIRepository)(nil).GetAliases), guildID)
}

// GetDemotes mocks base method.
func (m *MockIRepository) GetDemotes(guildID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDemotes", guildID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDemotes indicates an expected call of GetDemotes.
func (mr *MockIRepositoryMockRecorder) GetDemotes(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDemotes", reflect.TypeOf((*MockIRepository)(nil).GetDemotes), guildID)
}

// GetOmits mocks base method.
func (m *MockIRepository) GetOmits(guildID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOmits", guildID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOmits indicates an expected call of GetOmits.
func (mr *MockIRepositoryMockRecorder) GetOmits(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOmits", reflect.TypeOf((*MockIRepository)(nil).GetOmits), guildID)
}

// GetPromotes mocks base method.
func (m *MockIRepository) GetPromotes(guildID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotes", guildID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotes indicates an expected call of GetPromotes.
func (mr *MockIRepositoryMockRecorder) GetPromotes(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotes", reflect.TypeOf((*MockIRepository)(nil).GetPromotes), guildID)
}

// GetTagOperations mocks base method.
func (m *MockIRepository) GetTagOperations(guildID string) (map[string]TagOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagOperations", guildID)
	ret0, _ := ret[0].(map[string]TagOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagOperations indicates an expected call of GetTagOperations.
func (mr *MockIRepositoryMockRecorder) GetTagOperations(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagOperations", reflect.TypeOf((*MockIRepository)(nil).GetTagOperations), guildID)
}

// SetAlias mocks base method.
func (m *MockIRepository) SetAlias(guildID string, ali Alias, act Actual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAlias", guildID, ali, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAlias indicates an expected call of SetAlias.
func (mr *MockIRepositoryMockRecorder) SetAlias(guildID, ali, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlias", reflect.TypeOf((*MockIRepository)(nil).SetAlias), guildID, ali, act)
}

// SetDemote mocks base method.
func (m *MockIRepository) SetDemote(guildID, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDemote", guildID, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDemote indicates an expected call of SetDemote.
func (mr *MockIRepositoryMockRecorder) SetDemote(guildID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDemote", reflect.TypeOf((*MockIRepository)(nil).SetDemote), guildID, tag)
}

// SetOmit mocks base method.
func (m *MockIRepository) SetOmit(guildID, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOmit", guildID, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOmit indicates an expected call of SetOmit.
func (mr *MockIRepositoryMockRecorder) SetOmit(guildID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOmit", reflect.TypeOf((*MockIRepository)(nil).SetOmit), guildID, tag)
}

// SetPromote mocks base method.
func (m *MockIRepository) SetPromote(guildID, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPromote", guildID, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPromote indicates an expected call of SetPromote.
func (mr *MockIRepositoryMockRecorder) SetPromote(guildID, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPromote", reflect.TypeOf((*MockIRepository)(nil).SetPromote), guildID, tag)
}
